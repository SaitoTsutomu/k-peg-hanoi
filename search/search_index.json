{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"k_peg_hanoi module","text":""},{"location":"#src.k_peg_hanoi.hanoi","title":"<code>hanoi(md, pos)</code>","text":"<p>Moves of Tower of Hanoi</p> <p>Parameters:</p> Name Type Description Default <code>md</code> <code>int</code> <p>number of disks</p> required <code>pos</code> <code>list[int]</code> <p>position of rods</p> required <p>Returns:</p> Type Description <code>Iterable[tuple[int, int]]</code> <p>from, to</p> Source code in <code>src/k_peg_hanoi/__init__.py</code> <pre><code>def hanoi(md: int, pos: list[int]) -&gt; Iterable[tuple[int, int]]:\n    \"\"\"Moves of Tower of Hanoi\n\n    :param md: number of disks\n    :param pos: position of rods\n    :return: from, to\n    \"\"\"\n    if md == 1:\n        yield pos[0], pos[-1]\n        return\n    n = len(pos)\n    if n &lt;= 2:\n        msg = \"Too few len(pos)\"\n        raise ValueError(msg)\n    mn = min((nmove(i, n) * 2 + nmove(md - i, n - 1), i) for i in range(1, md))[1]\n    yield from hanoi(mn, [pos[0]] + pos[2:] + [pos[1]])\n    yield from hanoi(md - mn, [pos[0]] + pos[2:-1] + [pos[-1]])\n    yield from hanoi(mn, pos[1:-1] + [pos[0], pos[-1]])\n</code></pre>"},{"location":"#src.k_peg_hanoi.nmove","title":"<code>nmove(m, n)</code>  <code>cached</code>","text":"<p>minimum number of moves</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>int</code> <p>number of disks</p> required <code>n</code> <code>int</code> <p>number of rods</p> required <p>Returns:</p> Type Description <code>float</code> <p>minimum number of moves</p> Source code in <code>src/k_peg_hanoi/__init__.py</code> <pre><code>@cache\ndef nmove(m: int, n: int) -&gt; float:\n    \"\"\"minimum number of moves\n\n    :param m: number of disks\n    :param n: number of rods\n    :return: minimum number of moves\n    \"\"\"\n    n = min(m + 1, n)\n    if n == 2:\n        return 1 if m == 1 else float(\"inf\")\n    if n == 3:\n        return 2**m - 1\n    if n == m + 1:\n        return 2 * m - 1\n    return min(nmove(i, n) * 2 + nmove(m - i, n - 1) for i in range(1, m))\n</code></pre>"},{"location":"#src.k_peg_hanoi.show_hanoi","title":"<code>show_hanoi(m, n=3, *, text=False)</code>","text":"<p>Show move of Tower of Hanoi</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>int</code> <p>number of disks</p> required <code>n</code> <code>int</code> <p>number of rods, default 3</p> <code>3</code> <code>text</code> <code>bool</code> <p>show with text, default False</p> <code>False</code> Source code in <code>src/k_peg_hanoi/__init__.py</code> <pre><code>def show_hanoi(m: int, n: int = 3, *, text: bool = False):\n    \"\"\"Show move of Tower of Hanoi\n\n    :param m: number of disks\n    :param n: number of rods, default 3\n    :param text: show with text, default False\n    \"\"\"\n    towers = [list(range(m, 0, -1))] + [[] for _ in range(n - 1)]\n    if not text:\n        _show(towers, 0)\n    for i, (fr, to) in enumerate(hanoi(m, list(range(n))), 1):\n        towers[to].append(towers[fr].pop())\n        if text:\n            print(f\"#{i} disk {towers[to][-1]} from {fr} to {to}\")\n        else:\n            _show(towers, i)\n</code></pre>"}]}