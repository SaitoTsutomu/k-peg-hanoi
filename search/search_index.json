{"config":{"lang":["ja"],"separator":"[\\s\\-\u3000\u3001\u3002\uff0c\uff0e]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Usage","text":""},{"location":"#install","title":"Install","text":"<pre><code>pip install k-peg-hanoi\n</code></pre>"},{"location":"#hanoi-disk-rod","title":"<code>hanoi {disk#} {rod#}</code>","text":"<p>See <code>hanoi --help</code></p> <pre><code>$ hanoi 3 3\n  =               \n ===              \n=====             \n0----------------\n\n ===              \n=====         =   \n1----------------\n\n=====  ===    =   \n2----------------\n\n        =         \n=====  ===        \n3----------------\n\n        =         \n       ===  ===== \n4----------------\n\n  =    ===  ===== \n5----------------\n\n             ===  \n  =         ===== \n6----------------\n\n              =   \n             ===  \n            ===== \n7----------------\n</code></pre> <pre><code>$ hanoi 3 4\n  =                     \n ===                    \n=====                   \n0----------------------\n\n ===                    \n=====   =               \n1----------------------\n\n=====   =    ===        \n2----------------------\n\n        =    ===  ===== \n3----------------------\n\n                   ===  \n        =         ===== \n4----------------------\n\n                    =   \n                   ===  \n                  ===== \n5----------------------\n</code></pre> <pre><code>$ hanoi 4 4 --text\n#1 disk 1 from 0 to 1\n#2 disk 2 from 0 to 3\n#3 disk 3 from 0 to 2\n#4 disk 2 from 3 to 2\n#5 disk 4 from 0 to 3\n#6 disk 2 from 2 to 0\n#7 disk 3 from 2 to 3\n#8 disk 2 from 0 to 3\n#9 disk 1 from 1 to 3\n</code></pre>"},{"location":"k-peg-hanoi/","title":"Python","text":""},{"location":"k-peg-hanoi/#sample","title":"Sample","text":"<pre><code>from k_peg_hanoi import hanoi\n\nmd = 3  # number of disks\nsize = 3  # number of rods\nfor i, (from_, to) in enumerate(hanoi(md, list(range(size))), 1):\n    print(i, from_, \"-&gt;\", to)\n</code></pre> <pre><code>1 0 -&gt; 2\n2 0 -&gt; 1\n3 2 -&gt; 1\n4 0 -&gt; 2\n5 1 -&gt; 0\n6 1 -&gt; 2\n7 0 -&gt; 2\n</code></pre>"},{"location":"k-peg-hanoi/#k_peg_hanoi-module","title":"<code>k_peg_hanoi</code> module","text":""},{"location":"k-peg-hanoi/#src.k_peg_hanoi.hanoi","title":"<code>hanoi(md, pos)</code>","text":"<p>Moves of Tower of Hanoi</p> <p>Parameters:</p> Name Type Description Default <code>md</code> <code>int</code> <p>number of disks</p> required <code>pos</code> <code>list[int]</code> <p>position of rods</p> required <p>Returns:</p> Type Description <code>Iterable[tuple[int, int]]</code> <p>from, to</p> Source code in <code>src/k_peg_hanoi/__init__.py</code> <pre><code>def hanoi(md: int, pos: list[int]) -&gt; Iterable[tuple[int, int]]:\n    \"\"\"Moves of Tower of Hanoi\n\n    :param md: number of disks\n    :param pos: position of rods\n    :return: from, to\n    \"\"\"\n    if md == 1:\n        yield pos[0], pos[-1]\n        return\n    n = len(pos)\n    if n &lt;= 2:\n        msg = \"Too few len(pos)\"\n        raise ValueError(msg)\n    mn = min((nmove(i, n) * 2 + nmove(md - i, n - 1), i) for i in range(1, md))[1]\n    yield from hanoi(mn, [pos[0]] + pos[2:] + [pos[1]])\n    yield from hanoi(md - mn, [pos[0]] + pos[2:-1] + [pos[-1]])\n    yield from hanoi(mn, pos[1:-1] + [pos[0], pos[-1]])\n</code></pre>"},{"location":"k-peg-hanoi/#src.k_peg_hanoi.nmove","title":"<code>nmove(m, n)</code>  <code>cached</code>","text":"<p>minimum number of moves</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>int</code> <p>number of disks</p> required <code>n</code> <code>int</code> <p>number of rods</p> required <p>Returns:</p> Type Description <code>float</code> <p>minimum number of moves</p> Source code in <code>src/k_peg_hanoi/__init__.py</code> <pre><code>@cache\ndef nmove(m: int, n: int) -&gt; float:\n    \"\"\"minimum number of moves\n\n    :param m: number of disks\n    :param n: number of rods\n    :return: minimum number of moves\n    \"\"\"\n    n = min(m + 1, n)\n    if n == 2:\n        return 1 if m == 1 else float(\"inf\")\n    if n == 3:\n        return 2**m - 1\n    if n == m + 1:\n        return 2 * m - 1\n    return min(nmove(i, n) * 2 + nmove(m - i, n - 1) for i in range(1, m))\n</code></pre>"},{"location":"k-peg-hanoi/#src.k_peg_hanoi.show_hanoi","title":"<code>show_hanoi(m, n=3, *, text=False)</code>","text":"<p>Show move of Tower of Hanoi</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>int</code> <p>number of disks</p> required <code>n</code> <code>int</code> <p>number of rods, default 3</p> <code>3</code> <code>text</code> <code>bool</code> <p>show with text, default False</p> <code>False</code> Source code in <code>src/k_peg_hanoi/__init__.py</code> <pre><code>def show_hanoi(m: int, n: int = 3, *, text: bool = False):\n    \"\"\"Show move of Tower of Hanoi\n\n    :param m: number of disks\n    :param n: number of rods, default 3\n    :param text: show with text, default False\n    \"\"\"\n    towers = [list(range(m, 0, -1))] + [[] for _ in range(n - 1)]\n    if not text:\n        _show(towers, 0)\n    for i, (fr, to) in enumerate(hanoi(m, list(range(n))), 1):\n        towers[to].append(towers[fr].pop())\n        if text:\n            print(f\"#{i} disk {towers[to][-1]} from {fr} to {to}\")\n        else:\n            _show(towers, i)\n</code></pre>"}]}